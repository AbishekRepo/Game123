generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  password      String
  walletBalance Float        @default(0)
  role          UserRole     @default(USER)
  createdAt     DateTime     @default(now())
  lastLogin     DateTime     @updatedAt
  bets          Bet[]
  transactions  Transaction[]
  accounts      Account[]
  sessions      Session[]   

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  DEVELOPER
  ANALYST
  USER
}

model Bet {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  gameId      String
  betAmount   Float
  multiplier  Float
  status      BetStatus @default(PENDING)
  result      Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("bets")
}

enum BetStatus {
  PENDING
  WON
  LOST
  CANCELLED
}

model Transaction {
  id        String            @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  type      TransactionType
  amount    Float
  status    TransactionStatus @default(PENDING)
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@map("transactions")
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BET_PLACED
  BET_WON
  BET_LOST
  BONUS
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}